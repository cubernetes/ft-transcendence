#!/bin/sh

set -e

wait_for_service () {
	service=$1
	[ -n "$service" ] || { echo "Expected 1 argument"; return 1; }
	i=0
	while [ ! "$(2>/dev/null docker inspect -f "{{.State.Health.Status}}" "$service")" = "healthy" ]; do
		printf "\015""Waiting_for_service_${service}_to_start%${i}s" "" | sed -u "s/ /./g; s/_/ /g"
		i=$((i + 1))
		sleep 0.3
	done
	echo
}

wait_for_kibana_dashboards () {
	# Quits after first match
	echo "Waiting for kibana to say that dashboards are imported (might take a minute)..."
	docker compose logs -f kibana | stdbuf -i0 -o0 grep -Fqm1 'Dashboard import completed. Check Kibana UI to verify.'
}

start=$(date +%s)

wait_for_service vault
wait_for_service elasticsearch
wait_for_service logstash
wait_for_service kibana
wait_for_service backend
wait_for_kibana_dashboards

echo "Waiting 15 more seconds because kibana healthcheck is currently not working quite right"
sleep 15

HTTP_PORT=$(docker port caddy | grep -Fv '[::]' | head -1 | awk -F/ '{print $1}')
KIBANA_PORT=$(docker port kibana | grep -Fv '[::]' | head -1 | awk -F/ '{print $1}')

echo "Frontend: http://localhost:${HTTP_PORT}"
echo "OpenAPI:  http://localhost:${HTTP_PORT}/api/docs"
echo "ELK       http://localhost:${KIBANA_PORT}"
echo "Run 'make get-env SERVICE=elasticsearch' to get credentials for kibana"

now=$(date +%s)
min=$(( (now - start) / 60))
sec=$(( (now - start) % 60))

echo "Took ${min}m${sec}s"
