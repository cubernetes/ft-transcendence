input {
  # TCP input for receiving logs from pino-socket
  tcp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines
    tags => ["backend", "tcp"]
  }
  
  # UDP alternative (same port for simplicity)
  udp {
    port => "${LOGSTASH_PORT:5050}"
    codec => json_lines
    tags => ["backend", "udp"]
  }
}

filter {
  # Parse timestamps from Pino logs
  if [time] {
    date {
      match => ["time", "UNIX_MS", "ISO8601"]
      target => "@timestamp"
      remove_field => ["time"]
    }
  }

  # Handle Pino log levels (numeric to string mapping)
  if [level] {
    if [level] == 10 { mutate { add_field => { "log_level" => "trace" } } }
    else if [level] == 20 { mutate { add_field => { "log_level" => "debug" } } }
    else if [level] == 30 { mutate { add_field => { "log_level" => "info" } } }
    else if [level] == 40 { mutate { add_field => { "log_level" => "warn" } } }
    else if [level] == 50 { mutate { add_field => { "log_level" => "error" } } }
    else if [level] == 60 { mutate { add_field => { "log_level" => "fatal" } } }
    else { mutate { add_field => { "log_level" => "unknown" } } }
  }

  # Extract service and module information
  if [service] {
    mutate { add_field => { "[@metadata][service]" => "%{service}" } }
  } else {
    mutate { add_field => { "[@metadata][service]" => "backend" } }
  }

  # Add environment metadata
  mutate {
    add_field => {
      "[@metadata][index_name]" => "ft-transcendence-logs"
    }
  }

  # Enhanced categorization based on message content and context
  if "backend" in [tags] {
    # User activity logs
    if [msg] =~ /(?i)(user|login|register|logout|avatar|profile|authentication|password|2fa|totp)/ 
       or [message] =~ /(?i)(user|login|register|logout|avatar|profile|authentication|password|2fa|totp)/
       or ([req][url] and [req][url] =~ /\/user/) {
      mutate {
        add_tag => ["user_activity"]
        add_field => { "category" => "user_management" }
      }
    }
    
    # Game activity logs
    if [msg] =~ /(?i)(game|pong|score|match|play|lobby|tournament)/ 
       or [message] =~ /(?i)(game|pong|score|match|play|lobby|tournament)/
       or ([req][url] and [req][url] =~ /\/(game|lobby)/)
       or [event_type] =~ /(?i)(game_|player_|scoring)/ {
      mutate {
        add_tag => ["game_activity"]
        add_field => { "category" => "game_management" }
      }
    }

    # WebSocket logs
    if [msg] =~ /(?i)(websocket|socket|ws|connection|disconnect)/ 
       or [message] =~ /(?i)(websocket|socket|ws|connection|disconnect)/ {
      mutate {
        add_tag => ["websocket_activity"]
        add_field => { "category" => "realtime_communication" }
      }
    }

    # Database logs
    if [msg] =~ /(?i)(database|db|sql|query|migration|seed)/ 
       or [message] =~ /(?i)(database|db|sql|query|migration|seed)/ {
      mutate {
        add_tag => ["database_activity"]
        add_field => { "category" => "data_management" }
      }
    }

    # API request logs
    if [req] and [req][method] and [req][url] {
      mutate {
        add_tag => ["api_request"]
        add_field => { 
          "category" => "api_access"
          "api_method" => "%{[req][method]}"
          "api_url" => "%{[req][url]}"
        }
      }
      
      # Add response status if available
      if [res] and [res][statusCode] {
        mutate {
          add_field => { "response_status" => "%{[res][statusCode]}" }
        }
        
        # Categorize by status code
        if [res][statusCode] >= 200 and [res][statusCode] < 300 {
          mutate { add_tag => ["success_response"] }
        } else if [res][statusCode] >= 400 and [res][statusCode] < 500 {
          mutate { add_tag => ["client_error"] }
        } else if [res][statusCode] >= 500 {
          mutate { add_tag => ["server_error"] }
        }
      }
    }

    # Error logs
    if [log_level] == "error" or [log_level] == "fatal" or [error] {
      mutate {
        add_tag => ["error", "needs_attention"]
        add_field => { "priority" => "high" }
      }
      
      # Extract error details
      if [error] {
        if [error][name] {
          mutate { add_field => { "error_type" => "%{[error][name]}" } }
        }
        if [error][message] {
          mutate { add_field => { "error_message" => "%{[error][message]}" } }
        }
      }
    }

    # Performance logs
    if [responseTime] {
      mutate { add_field => { "response_time_ms" => "%{responseTime}" } }
      
      # Flag slow requests
      if [responseTime] > 1000 {
        mutate { add_tag => ["slow_request", "performance_issue"] }
      }
    }

    # Security-related logs
    if [msg] =~ /(?i)(unauthorized|forbidden|invalid token|authentication failed|security)/
       or [message] =~ /(?i)(unauthorized|forbidden|invalid token|authentication failed|security)/ {
      mutate {
        add_tag => ["security_event"]
        add_field => { "category" => "security" }
      }
    }
  }

  # Add user information if available
  if [userId] and [userId] != 0 {
    mutate { add_field => { "user_id" => "%{userId}" } }
  }
  if [username] and [username] != "" {
    mutate { add_field => { "username" => "%{username}" } }
  }

  # Clean up redundant fields
  mutate {
    remove_field => ["level", "pid", "v"]
  }
}

output {
  # Send to appropriate Elasticsearch indices based on category
  elasticsearch {
    hosts => ["https://elasticsearch:${ELASTICSEARCH_PORT}"]
    ssl_enabled => true
    ssl_verification_mode => "full"
    ssl_certificate_authorities => ["/etc/logstash/config/certs/ca.crt"]
    user => "${LOGSTASH_USER}"
    password => "${LOGSTASH_PASSWORD}"
    index => "%{[@metadata][index_name]}"
    action => "index"
    document_type => "_doc"
    manage_template => false
    template_overwrite => false
    pool_max => 1000
    pool_max_per_route => 100
    failure_type_logging_whitelist => ["client", "server", "rejected"]
  }

  # Send errors to a separate index for alerting
  if "error" in [tags] {
    elasticsearch {
      hosts => ["https://elasticsearch:${ELASTICSEARCH_PORT}"]
      ssl_enabled => true
      ssl_verification_mode => "full"
      ssl_certificate_authorities => ["/etc/logstash/config/certs/ca.crt"]
      user => "${LOGSTASH_USER}"
      password => "${LOGSTASH_PASSWORD}"
      index => "ft-transcendence-errors"
      action => "index"
      document_type => "_doc"
    }
  }

  # Debug output (only in development)
  if "${DEBUG:false}" == "true" {
    stdout { 
      codec => rubydebug {
        metadata => true
      }
    }
  }
}
