import { spawn, ChildProcess } from 'child_process';
import path from 'path';
import { userOptions } from './options';
import fs from 'fs';

export class AudioManager {
    private musicProcess: ChildProcess | null = null;
    private soundEffects = new Map<string, string>([
        ['paddle_hit', 'src/content/hit.wav'],
        ['wall_hit', 'src/content/bounce.wav'],
        ['score', 'src/content/score.wav'],
        ['blop', 'src/content/blop.wav'],
    ]);
    private musicTracks = new Map<string, string>([
        ['menu', 'src/content/menu.wav'],
        ['normal', 'src/content/neon-gaming.wav'],
        ['stylish', 'src/content/stylish_game.wav'],
        ['crazy', 'src/content/crazy_game.wav'],
    ]);
    private loopMusic: boolean = false;

    /**
     * Play a sound effect (non-blocking).
     */
    playSoundEffect(effectName: string): void {
        const soundPath = this.soundEffects.get(effectName);
        if (!soundPath || !fs.existsSync(soundPath)) {
            console.error(`Sound effect "${effectName}" not found`);
            return;
        }

        spawn('ffplay', ['-nodisp', '-autoexit', soundPath], { stdio: 'ignore', detached: true }).unref();
    }

    /**
     * Start playing background music based on the selected play style.
     */
    startMusic(name: string = ''): void {
        this.stopMusic(); // Stop previous track before starting new one

        const trackName = name || userOptions.playStyle;
        const musicPath = this.musicTracks.get(trackName);
        if (!musicPath || !fs.existsSync(musicPath)) {
            console.error(`Music track for "${trackName}" not found`);
            return;
        }

        this.loopMusic = true;
        this.musicProcess = this.spawnLoopingMusic(musicPath);
    }

    /**
     * Stop the currently playing background music.
     */
    stopMusic(): void {
        this.loopMusic = false;
        if (this.musicProcess) {
            this.musicProcess.kill('SIGTERM'); // Clean termination
            this.musicProcess = null;
        }
    }

    /**
     * Update audio settings when options change.
     */
    updateAudioSettings(): void {
        if (userOptions.music) {
            this.startMusic(); // Restart music with new settings
        } else {
            this.stopMusic();
        }
    }

    /**
     * Spawn a looping `ffplay` process to play music continuously.
     */
    private spawnLoopingMusic(audioPath: string): ChildProcess {
        const args = ['-nodisp', '-autoexit', '-loop', '0', audioPath];

        const child = spawn('ffplay', args, { stdio: 'ignore' });

        child.on('error', (err) => {
            console.error(`Failed to start 'ffplay': ${err.message}`);
        });

        child.on('exit', (code, signal) => {
            if (this.loopMusic && (code !== null || signal !== null)) {
                console.warn(`'ffplay' exited, restarting music...`);
                setTimeout(() => {
                    if (this.loopMusic) this.musicProcess = this.spawnLoopingMusic(audioPath);
                }, 100); // Small delay prevents overlap
            }
        });

        return child;
    }
}

// Export a singleton instance
export const audioManager = new AudioManager();
